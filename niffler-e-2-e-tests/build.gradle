buildscript {
    ext {
        protobufVersion = '3.24.3'
        grpcVersion = '1.58.0'
        allureVersion = '2.24.0'
        selenideVersion = '6.18.0'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.qameta.allure-adapter' version '2.11.2'
}

group 'guru.qa'
version '0.0.6-SNAPSHOT'

repositories {
    mavenCentral()
}

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.20.1")
        autoconfigure.set(true)
        aspectjWeaver.set(true)
    }
}

configurations {
    jaxb
}

tasks.register('genJaxb') {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "userdata.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "guru.qa.niffler.userdata.wsdl") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 17, target: 17, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/jaxb'
        }
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.0') {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    // REST
    testImplementation('com.squareup.retrofit2:retrofit:2.9.0') {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    testImplementation('com.squareup.retrofit2:converter-jackson:2.9.0') {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    testImplementation('com.squareup.okhttp3:logging-interceptor:4.11.0') {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk8"
    }
    // DB
    testImplementation 'org.springframework:spring-jdbc:6.0.4'
    testImplementation('org.postgresql:postgresql:42.5.3') {
        exclude group: "org.checkerframework", module: "checker-qual"
    }
    testImplementation 'p6spy:p6spy:3.9.1'
    testImplementation 'org.hibernate:hibernate-core:6.1.7.Final'
    testImplementation 'com.github.vertical-blank:sql-formatter:2.0.3'
    testImplementation 'org.springframework.security:spring-security-crypto:6.1.0'
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter-api"
        exclude group: "org.junit.platform"
        exclude group: "org.junit.jupiter"
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation("io.qameta.allure:allure-okhttp3:${allureVersion}") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    testImplementation "io.qameta.allure:allure-grpc:${allureVersion}"
    // WEB
    testImplementation("com.codeborne:selenide:${selenideVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "com.google.errorprone", module: "error_prone_annotations"
    }
    // Utils
    testImplementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: "org.apache.commons", module: "commons-lang3"
    }
    testImplementation 'commons-io:commons-io:2.13.0'
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'org.slf4j:slf4j-api:2.0.9'
    // gRPC
    testImplementation("io.grpc:grpc-protobuf:${grpcVersion}") {
        exclude group: "com.google.protobuf", module: "protobuf-java"
    }
    testImplementation("io.grpc:grpc-stub:${grpcVersion}") {
        exclude group: "com.google.guava", module: "guava"
    }
    testImplementation("io.grpc:grpc-netty:${grpcVersion}") {
    }
    testImplementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    testImplementation project(':niffler-grpc-common')
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0
    // SOAP
    testImplementation 'com.sun.xml.messaging.saaj:saaj-impl:3.0.1'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.1'
    // Kafka
    testImplementation('org.apache.kafka:kafka-clients:3.5.0') {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    // Wiremock
    testImplementation('com.github.tomakehurst:wiremock-jre8:2.35.1') {
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.apache.httpcomponents.client5", module: "httpclient5"
        exclude group: "com.google.guava", module: "guava"
        exclude group: "org.apache.commons", module: "commons-lang3"
        exclude group: "commons-io", module: "commons-io"
        exclude group: "net.minidev", module: "json-smart"
    }
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'
    components.all(NettyBomAlignmentRule)
}

abstract class NettyBomAlignmentRule implements ComponentMetadataRule {
    @Override
    void execute(ComponentMetadataContext componentMetadataContext) {
        componentMetadataContext.details.with {
            if (id.group.startsWith("io.netty")) {
                belongsTo("io.netty:netty-bom:${id.version}", false)
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}